type AccountBalance = record { id : principal; staked : nat32 };
type AddMemberArgs = record {
  description : text;
  group_name : text;
  new_member : principal;
};
type BountyDone = record {
  proposal_expired_at : nat64;
  from : principal;
  description : text;
  tokens : nat64;
  action_member : principal;
  proposal_created_at : nat64;
  bounty_task : text;
};
type BountyRaised = record {
  proposal_expired_at : nat64;
  description : text;
  tokens : nat64;
  action_member : principal;
  proposal_created_at : nat64;
  bounty_task : text;
};
type ChangeDaoPolicy = record {
  description : text;
  action_member : principal;
  dao_purpose : text;
};
type ChnageDaoConfig = record {
  new_dao_name : text;
  description : text;
  action_member : principal;
};
type Comment = record {
  created_at : nat64;
  author_principal : principal;
  likes : nat16;
  replies : vec text;
  comment_text : text;
  comment_id : text;
};
type Dao = record {
  image_canister : principal;
  members : vec principal;
  dao_id : principal;
  proposals_count : nat32;
  token_ledger_id : LedgerCanisterId;
  token_symbol : text;
  daohouse_canister_id : principal;
  linksandsocials : vec text;
  daotype : text;
  tokens_required_to_vote : nat32;
  dao_name : text;
  proposal_ids : vec text;
  image_id : text;
  groups_count : nat64;
  members_permissions : vec text;
  link_of_document : text;
  members_count : nat32;
  followers : vec principal;
  followers_count : nat32;
  total_tokens : nat32;
  cool_down_period : nat32;
  purpose : text;
  required_votes : nat32;
};
type DaoGroup = record {
  group_members : vec principal;
  quorem : nat8;
  group_name : text;
  group_permissions : vec text;
};
type DaoInput = record {
  image_canister : principal;
  members : vec principal;
  token_symbol : text;
  daohouse_canister_id : principal;
  linksandsocials : vec text;
  daotype : text;
  tokens_required_to_vote : nat32;
  dao_groups : vec DaoGroup;
  dao_name : text;
  image_id : text;
  members_permissions : vec text;
  link_of_document : text;
  followers : vec principal;
  cool_down_period : nat32;
  purpose : text;
  token_supply : nat32;
  required_votes : nat32;
};
type LedgerCanisterId = record { id : principal };
type Pagination = record { end : nat32; start : nat32 };
type ProposalStakes = record {
  proposal_id : text;
  balances : vec AccountBalance;
};
type ProposalState = variant {
  Open;
  Executing;
  Rejected;
  Succeeded;
  Accepted;
  Expired;
};
type ProposalType = variant {
  AddMemberProposal;
  ChangeDaoConfig;
  BountyDone;
  UpgradeRemote;
  Polls;
  TokenTransfer;
  ChnageDaoPolicy;
  BountyRaised;
  RemoveMemberPrposal;
  FunctionCall;
  UpdateSelf;
};
type Proposals = record {
  principal_of_action : principal;
  share_count : nat64;
  proposal_expired_at : nat64;
  new_dao_name : opt text;
  proposal_submitted_at : nat64;
  proposal_approved_votes : nat64;
  created_by : principal;
  likes : nat32;
  proposal_rejected_votes : nat64;
  proposal_title : text;
  rejected_votes_list : vec principal;
  proposal_description : text;
  proposal_id : text;
  proposal_status : ProposalState;
  approved_votes_list : vec principal;
  comments : nat32;
  group_to_join : opt text;
  comments_list : vec Comment;
  proposal_type : ProposalType;
  required_votes : nat32;
};
type RemoveMemberArgs = record {
  description : text;
  action_member : principal;
  group_name : text;
};
type ReplyCommentArgs = record {
  comment : text;
  proposal_id : text;
  comment_id : text;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : vec principal; Err : text };
type Result_3 = variant { Ok : vec Proposals; Err : text };
type Result_4 = variant { Ok : nat; Err : text };
type TokenTransferArgs = record {
  to : principal;
  from : principal;
  tokens : nat64;
};
type TokenTransferPolicy = record {
  from : principal;
  description : text;
  tokens : nat64;
  action_member : principal;
};
type UpdateDaoSettings = record {
  members : vec principal;
  linksandsocials : vec text;
  daotype : text;
  dao_name : text;
  link_of_document : text;
  followers : vec principal;
  purpose : text;
};
type VoteParam = variant { No; Yes };
service : (DaoInput) -> {
  add_ledger_canister_id : (LedgerCanisterId) -> (Result);
  ask_to_join_dao : (principal) -> (Result_1);
  change_proposal_state : (text, ProposalState) -> (Result_1);
  comment_on_proposal : (text, text) -> (Result_1);
  follow_dao : (principal) -> (Result_1);
  get_all_balances : (text) -> (ProposalStakes) query;
  get_all_groups : () -> (vec DaoGroup);
  get_all_proposals : (Pagination) -> (vec Proposals);
  get_dao_detail : () -> (Dao);
  get_dao_followers : () -> (vec principal) query;
  get_dao_groups : () -> (vec DaoGroup) query;
  get_dao_members : () -> (vec principal) query;
  get_members_of_group : (text) -> (Result_2) query;
  get_my_proposal : () -> (Result_3);
  get_proposal_by_id : (text) -> (Proposals);
  icrc_transfer : (TokenTransferArgs) -> (Result_4);
  proposal_refresh : () -> (Result_1);
  proposal_to_add_member_to_group : (AddMemberArgs) -> (Result_1);
  proposal_to_bounty_done : (BountyDone) -> (Result_1);
  proposal_to_bounty_raised : (BountyRaised) -> (Result_1);
  proposal_to_change_dao_policy : (ChangeDaoPolicy) -> (Result_1);
  proposal_to_chnage_dao_config : (ChnageDaoConfig) -> (Result_1);
  proposal_to_remove_member_to_group : (RemoveMemberArgs) -> (Result_1);
  proposal_to_transfer_token : (TokenTransferPolicy) -> (Result_1);
  reply_comment : (ReplyCommentArgs) -> (Result_1);
  search_proposal : (text) -> (vec Proposals) query;
  unfollow_dao : (principal) -> (Result_1);
  update_dao_settings : (UpdateDaoSettings) -> (Result_1);
  vote : (text, VoteParam) -> (Result_1);
}
