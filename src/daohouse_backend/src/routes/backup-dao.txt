    // ic_cdk::println!("value is {:?}", dao_detail);
    // let principal_id = api::caller();
    // let user_profile_detail = with_state(|state| state.user_profile.get(&principal_id).clone());

    // let mut user_profile_detail = match user_profile_detail {
    //     Some(data) => data,
    //     None => panic!("User profile doesn't exist !"),
    // };

    // let mut updated_members = dao_detail.members.clone();
    // updated_members.push(principal_id.clone());

    // // image upload

    // let image_id: Result<String, String> = upload_image(
    //     // canister_id,
    //     ImageData {
    //         content: dao_detail.image_content,
    //         name: dao_detail.image_title,
    //         content_type: dao_detail.image_content_type,
    //     },
    // )
    // .await;

    // let mut id = String::new();
    // let image_create_res: bool = (match image_id {
    //     Ok(value) => {
    //         id = value;
    //         Ok(())
    //     }
    //     Err(er) => {
    //         ic_cdk::println!("error {}", er.to_string());
    //         Err(())
    //     }
    // })
    // .is_err();

    // if image_create_res {
    //     return Err("Image upload failed".to_string());
    // }

    // let update_dau_detail = DaoCanisterInput {
    //     dao_name: dao_detail.dao_name.clone(),
    //     purpose: dao_detail.purpose.clone(),
    //     daotype: dao_detail.daotype,
    //     link_of_document: dao_detail.link_of_document,
    //     cool_down_period: dao_detail.cool_down_period,
    //     members: updated_members,
    //     // tokenissuer: dao_detail.tokenissuer,
    //     linksandsocials: dao_detail.linksandsocials,
    //     required_votes: dao_detail.required_votes,
    //     followers: vec![api::caller()],
    //     image_id: id.clone(),
    //     members_permissions: dao_detail.members_permissions,
    //     dao_groups: dao_detail.dao_groups,
    //     tokens_required_to_vote: dao_detail.tokens_required_to_vote,
    // };

    // let dao_detail_bytes: Vec<u8> = match encode_one(&update_dau_detail) {
    //     Ok(bytes) => bytes,
    //     Err(e) => {
    //         return Err(format!("Failed to serialize DaoInput: {}", e));
    //     }
    // };

    // // let user_profile_detail = with_state(|state| state.user_profile.get(&principal_id).clone());

    // // let mut veccc: Vec<Principal> = Vec::new();
    // // let veccc: Vec<Principal> = vec![api::caller(), ic_cdk::api::id()];
    // // veccc.push(api::caller());
    // // veccc.push(ic_cdk::api::id());

    // let conttt = CanisterSettings {
    //     controllers: Some(vec![api::caller(), ic_cdk::api::id()]),
    //     ..Default::default()
    // };

    // let arg = CreateCanisterArgument {
    //     settings: Some(conttt),
    // };
    // let (canister_id,) = match create_canister(arg).await {
    //     Ok(id) => id,
    //     Err((_, err_string)) => {
    //         return Err(err_string);
    //     }
    // };
    // // let (id,)=canister_id;
    // let _addcycles = deposit_cycles(canister_id, 300_000_000_000).await.unwrap();
    // ic_cdk::println!("errrrrr in deposit {:?}", _addcycles);

    // let canister_id_principal = canister_id.canister_id;

    // println!("Canister ID: {}", canister_id_principal.to_string());
    // let wasm_dao: Vec<u8> = Vec::new();
    // with_state(|state| match state.wasm_module.get(&0) {
    //     Some(val) => val.wasm,
    //     None => panic!("nhi mila"),
    // });

    // let arg1 = InstallCodeArgument {
    //     mode: CanisterInstallMode::Install,
    //     canister_id: canister_id_principal,
    //     // wasm_module: vec![],
    //     wasm_module: wasm_dao,
    //     arg: dao_detail_bytes,
    // };
    // let _installcode = install_code(arg1).await.unwrap();
    // // ic_cdk::println!("errrrrr in installing {:?}", _installcode);
    // println!("Canister ID: {:?}", canister_id);

    // // creating ledger account associated with dao
    // let ledger_canister_id = create_ledger(
    //     canister_id_principal.to_string().clone(),
    //     dao_detail.total_tokens,
    //     dao_detail.token_name,
    //     dao_detail.token_symbol,
    //     dao_detail.members,
    // )
    // .await
    // .map_err(|er| format!("Error while creating ledger canister {}", String::from(er)))?;

    // let dao_details: DaoDetails = DaoDetails {
    //     dao_canister_id: canister_id_principal.to_string().clone(),
    //     dao_name: dao_detail.dao_name,
    //     dao_desc: dao_detail.purpose,
    //     // image_id: id,
    //     dao_id: canister_id_principal.clone(),
    //     dao_associated_ledger: ledger_canister_id.to_string().clone(),
    //     // dao_associated_ledger: String::from("abc")
    // };

    // // ic_cdk::println!(
    // //     "ledger canister created successfully {}",
    // //     ledger_canister_id
    // // );

    // with_state(|state| {
    //     state
    //         .dao_details
    //         .insert(canister_id_principal.to_string().clone(), dao_details)
    // });

    // user_profile_detail
    //     .dao_ids
    //     .push(canister_id_principal.to_string());

    // // updating ledger canister id in newely created canister id

    // let _ = call_inter_canister::<LedgerCanisterId, String>(
    //     "add_ledger_canister_id",
    //     LedgerCanisterId {
    //         id: ledger_canister_id,
    //     },
    //     canister_id_principal,
    // )
    // .await
    // .map_err(|err| format!("Error occurred {}", err.to_string()));

    // // let response: CallResult<(Result<String, String>,)> = ic_cdk::call(
    // //     canister_id_principal,
    // //     "add_ledger_canister_id",
    // //     (LedgerCanisterId {
    // //         id: ledger_canister_id,
    // //     },),
    // // )
    // // .await;

    // // ic_cdk::println!("ye hai bhai canister id of ledger: {:?}", response);

    // //     let res0: Result<(Result<String, String>,), (RejectionCode, String)> = response;

    // //     let formatted_value = match res0 {
    // //       Ok((Ok(value),)) => {
    // //           format!("{}", value);
    // //           Ok(format!("{}", value))
    // //           // value
    // //       }
    // //       Ok((Err(err),)) => Err(err),
    // //       Err((code, message)) => {
    // //           match code {
    // //               RejectionCode::NoError => Err("NoError".to_string()),
    // //               RejectionCode::SysFatal => Err("SysFatal".to_string()),
    // //               RejectionCode::SysTransient => Err("SysTransient".to_string()),
    // //               RejectionCode::DestinationInvalid => Err("DestinationInvalid".to_string()),
    // //               RejectionCode::CanisterReject => Err("CanisterReject".to_string()),
    // //               // Handle other rejection codes here
    // //               _ => Err(format!("Unknown rejection code: {:?}: {}", code, message)),
    // //               // _ => Err(format!("Unknown rejection code: {:?}", code)),
    // //           }
    // //       }
    // //   };

    // with_state(|state| {
    //     let mut analytics = state.analytics_content.borrow().get(&0).unwrap();
    //     analytics.dao_counts += 1;
    //     state.analytics_content.insert(0, analytics);
    //     state.user_profile.insert(principal_id, user_profile_detail)
    // });

    // // let wasm_dao: Vec<u8> = Vec::new();
    // // with_state(|state| match state.wasm_module.get(&0) {
    // //     Some(val) => val.wasm,
    // //     None => panic!("nhi mila"),
    // // });

    // // let arg1 = InstallCodeArgument {
    // //     mode: CanisterInstallMode::Install,
    // //     canister_id: canister_id_principal,
    // //     // wasm_module: vec![],
    // //     wasm_module: wasm_dao,
    // //     arg: dao_detail_bytes,
    // // };
    // // let _installcode = install_code(arg1).await.unwrap();
    // // // ic_cdk::println!("errrrrr in installing {:?}", _installcode);
    // // println!("Canister ID: {:?}", canister_id);
    // // Ok("DAO created successfully".to_string())
    // Ok(format!(
    //     "Dao created, canister id: {}",
    //     canister_id_principal.to_string()
    // ))