type DaoInput = record {
  members : vec principal;
  linksandsocials : vec text;
  daotype : text;
  dao_name : text;
  link_of_document : text;
  tokenissuer : text;
  cool_down_period : text;
  purpose : text;
  required_votes : int8;

   // image
  image_content: opt blob;
  image_title: text;
  image_content_type: text;


};
type PostInfo = record {
  username: text;
  post_img : text;
  post_id : text;
  comment_count : nat32;
  // post_title : text;
  like_count : nat32;
  like_id_list : vec principal;
  post_description : text;
  comment_list : vec text;
  post_created_at : nat64;

 // image
  image_content: opt blob;
  image_title: text;
  image_content_type: text;

};
type PostInput = record {
  username: text;
  post_img : text;
//  post_title : text;
  post_description : text;
};
type Profileinput = record {
  username : text;
  twitter_id : text;
  description : text;
  website : text;
  contact_number : text;
  email_id : text;
  profile_img : text;
  telegram : text;
  tag_defines : vec text;

  // image 
  image_content: opt blob;
  image_title: text;
  image_content_type: text;


};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : PostInfo; Err : text };
type Result_3 = variant { Ok : UserProfile; Err : text };
type UserProfile = record {
  post_id : vec text;
  username : text;
  dao_ids : vec text;
  twitter_id : text;
  description : text;
  followers_list : vec principal;
  post_count : nat32;
  followings_count : nat32;
  user_id : principal;
  website : text;
  contact_number : text;
  email_id : text;
  followers_count : nat32;
  profile_img : text;
  telegram : text;
  tag_defines : vec text;
  followings_list : vec principal;
};
service : {
  comment_post : (text, text) -> (Result);
  create_dao : (text, DaoInput) -> (Result);
  create_new_post : (PostInput) -> (Result);
  create_profile : (text, Profileinput) -> (Result_1);
  delete_profile : () -> (Result_1);
  follow_user : (principal) -> (Result_1);
  get_all_posts : () -> (vec record { text; PostInfo }) query;
  get_post_byid : (text) -> (Result_2) query;
  get_user_profile : () -> (Result_3) query;
  like_post : (text) -> (Result);
  update_profile : (Profileinput) -> (Result_1);
}
