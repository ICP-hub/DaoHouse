type Analytics = record {
  dao_counts : nat64;
  proposals_count : nat64;
  post_count : nat64;
  members_count : nat64;
};
type CanisterData = record {
  paymeny_recipient : principal;
  ic_asset_canister : principal;
  dao_canister : principal;
};
type DaoDetails = record {
  dao_associated_ledger : principal;
  dao_desc : text;
  dao_name : text;
  dao_canister_id : principal;
};
type DaoGroup = record {
  group_members : vec principal;
  quorem : nat8;
  group_name : text;
  group_permissions : vec text;
};
type DaoInput = record {
  members : vec principal;
  image_title : text;
  token_symbol : text;
  linksandsocials : vec text;
  daotype : text;
  tokens_required_to_vote : nat32;
  image_content : blob;
  dao_groups : vec DaoGroup;
  dao_name : text;
  image_id : text;
  members_permissions : vec text;
  link_of_document : text;
  image_content_type : text;
  cool_down_period : nat32;
  token_name : text;
  purpose : text;
  token_supply : nat32;
  required_votes : nat32;
};
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type ImageData = record { content : blob; name : text; content_type : text };
type InitialArgs = record {
  dao_canister_id : principal;
  ic_asset_canister_id : principal;
  payment_recipient : principal;
};
type Pagination = record { end : nat32; start : nat32 };
type Profileinput = record {
  image_title : text;
  username : text;
  twitter_id : text;
  image_content : blob;
  description : text;
  website : text;
  contact_number : text;
  image_content_type : text;
  email_id : text;
  profile_img : text;
  telegram : text;
  tag_defines : vec text;
};
type ProposalType = variant {
  AddMemberProposal;
  VotingProposal;
  RemoveMemberPrposal;
};
type ProposalValueStore = record {
  title : text;
  action_principal : principal;
  description : text;
  created_by : principal;
  proposal_id : text;
  expiring_on : nat64;
  proposal_type : ProposalType;
  submitted_at : nat64;
  required_votes : nat32;
  associated_dao_canister_id : principal;
  dao_members : vec principal;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : Analytics; Err : text };
type Result_3 = variant { Ok : CanisterData; Err : text };
type Result_4 = variant { Ok : UserProfile; Err : text };
type Result_5 = variant { Ok : blob; Err : text };
type Result_6 = variant { Ok : nat; Err : text };
type UserProfile = record {
  post_id : vec text;
  username : text;
  dao_ids : vec principal;
  twitter_id : text;
  description : text;
  followers_list : vec principal;
  post_count : nat32;
  followings_count : nat32;
  user_id : principal;
  website : text;
  contact_number : text;
  email_id : text;
  followers_count : nat32;
  profile_img : text;
  telegram : text;
  tag_defines : vec text;
  followings_list : vec principal;
};
service : (InitialArgs) -> {
  add_proposal : (ProposalValueStore) -> (Result);
  check_user_existance : () -> (Result) query;
  create_dao : (DaoInput) -> (Result);
  create_profile : () -> (Result_1);
  delete_profile : () -> (Result_1);
  delete_proposal : (text) -> (Result);
  get_all_dao : (Pagination) -> (vec DaoDetails) query;
  get_analytics : () -> (Result_2) query;
  get_caller : () -> (principal) query;
  get_canister_meta_data : () -> (Result_3) query;
  get_cycles : () -> (nat64) query;
  get_dao_details : (text) -> (text);
  get_latest_proposals : (Pagination) -> (vec ProposalValueStore) query;
  get_profile_by_id : (principal) -> (Result_4);
  get_proposals : (Pagination) -> (vec ProposalValueStore) query;
  get_user_profile : () -> (Result_4) query;
  get_wasm : () -> (Result_5) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse);
  is_user_registered : (principal) -> (bool);
  make_payment : (nat64, principal) -> (Result_6);
  search_dao : (text) -> (vec DaoDetails) query;
  update_profile : (Profileinput) -> (Result_1);
  update_proposal_count : () -> (text);
  upload_image : (ImageData) -> (Result);
}
